////////////////////////////////////////////////////////////////////////////////
//
// PLOT RESULTS
//
////////////////////////////////////////////////////////////////////////////////

{
	load_file("../commonFcns/getCumHist.hoc")
	load_file("../commonFcns/getBargraphVec.hoc")
	
	load_file("../commonFcns/decimal.hoc")
	load_file("../commonFcns/mod.hoc")
}

///////////////////////////////////////////////////////////////////////////////
// RESPONSE AT AN EXAMPLARY DENDRITIC LOCATION
///////////////////////////////////////////////////////////////////////////////

objref voltExGraph
objref voltExBox

// below are parameters used for graphing
voltLowY = -60
voltHighY = -10

exSyn = 128  // recording site

exLeft = 250 
peakLeft = 400
histLeft = 700
momentLeft = 800


voltExBox = new HBox()                          // plot the response at exSyn												
{
	voltExBox.intercept(1)                      
	{
		voltExGraph = new Graph()
		voltACSF[exSyn].plot(voltExGraph,time,1,1)
		voltExGraph.label("Voltage recorded at the same dendritic branch")
		voltExGraph.size(0,100,voltLowY,voltHighY)
	}
	voltExBox.intercept(0)
	voltExBox.map("Example voltage",exLeft,0,300,300)
	voltExGraph.exec_menu("View = plot")
}


///////////////////////////////////////////////////////////////////////////////
// RESPONSE AT THE SOMA
///////////////////////////////////////////////////////////////////////////////

objref integralGraph
integralGraph = new Graph()
strdef dendIntegralLabel
{
	// plot to graph
	dendACSF.plot(integralGraph,time,1,1)
	integralGraph.label("Voltage recorded at the soma")
	integralGraph.exec_menu("View = plot")
	
	// label graphs
	integralGraph.label(dendIntegralLabel)
}

///////////////////////////////////////////////////////////////////////////////
// SHAPE PLOT OF RECORDING LOCATIONS
///////////////////////////////////////////////////////////////////////////////

numDum = 2
objref vBoxShape,shplot,dumCC[numDum]

// build dummy current clamps and demarcate locations
{
	// simulated recording sites
	somaA {dumCC[0] = new IClamp(0.5)}
	// exSyn = 128
	dendA5_0111111111111111100 {
		dumCC[1] = new IClamp(0.112245)
	}
	// exSyn = 61
	//dendA5_0111111111111111111 {
	//	dumCC[1] = new IClamp(0.35714286)
	//}
	for m=1,numDum {
		dumCC[m-1].dur = 0
		dumCC[m-1].amp = 0
	}
	
	vBoxShape = new VBox()
	vBoxShape.intercept(1)
	shplot = new Shape()
	
	for m=1,numSyn {
		if (m==148 || m==85 || m==70 || m==69 || m==140) {
			shplot.point_mark(nmda[m-1],1,"O",6)
		}
	}
	
	shplot.point_mark(dumCC[0],2,"O",12)
	shplot.point_mark(dumCC[1],3,"O",12)

	shplot.label("Large circles: recording sites")
	shplot.label("Black: Synapses")
	shplot.exec_menu("Whole Scene")
	shplot.flush()
	vBoxShape.intercept(0)
	vBoxShape.map("Spatial distribution of point processes",1200,0,500,900)
	shplot.exec_menu("View = plot")
	shplot.exec_menu("Show Diam")
}
